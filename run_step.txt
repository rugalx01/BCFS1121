=================================================================
## Day2 
## 安裝 solidity 的時候要注意是選擇 Juan Blanco 作者的版本

## 使用 solidity 0.5.16 但是編譯器會出現紅字，此時在紅線上使用滑鼠右鍵，選擇 change globol compiler version(remote) 切換到0.5.17的版本就會變正常了(預設安裝的版本會是比較高的版本，exapmle是 v8.x)

## 使用 truffle 建立 migrations ，用power shell 去執行 truffle create migration SecretNumber但是會出錯，所以要先變更 power shell的設定，使用管理者打開power shell 然後輸入 Set-ExecutionPolicy -ExecutionPolicy Unrestricted 在選擇A ，完成之後在重新下一次 truffle create migration 就會在 migrations 目錄之下看到檔案。

## 再去變更 migration 檔案的內容

## 變更檔案名稱為 1_secret_number.js

## 重新啟動 truffle [truffle --develop]

## 刷新內容 deploy --reset  (一開始這邊會出現錯誤，因為編譯的版本不依樣，所以要去 truffle-config.js 找到 compilers->solc->version 把內容改成對應的版本號 version: "0.5.17") 再重新去執行 deploy --reset 就會完成了

## 建立非同步交易 demo03.js 主要是要把 truffle 建立出來的 [合約].json 讀取近來使用，還有取得自建服務器的 id 跟 network-address

## 1個Ether 是10的18次方 1000000000000000000 [1 +* 18個0]

## 關於payable流程 (有關 Ether 的數值變動功能)

## 建立一個新的 Contracts  名稱是 SecretNumber.sol ,編輯內容

## 新建一個 migrations 在 truffle develop 執行 truffle create migration EtherTransfer 去建立出來

## 更改名稱為 2_ether_transfer.js，並編輯器內容

## 回到truffle develop去執行  migrate --reset 重新編譯出來新的 migrations 並且讓系統加載進去 會看到 > Total deployments:   2 (從原本的1變成2 多了一個)

## 準備範例8的製作

=================================================================
## Day 3

## call()只做讀取不修改、send()才會有修改。兩者都會有Event的狀態可以做確認。
## 伺服器啟動流程 1.先啟動server [truffle develop] 2.重新編譯 [deploy --reset] 3.測試連線 [node 某一個測試這邊是用demo08]

## 查詢帳戶餘額  web3.eth.getBalance(accounts[0])
## 查詢地址餘額  web3.eth.getBalance("YOUR_ADDRESS_FOR_THAT_CONTRACT")，地址可以用  const addresses = await web3.eth.getAccounts(); 取得
## 每次金額異動都會有gas(手續費的產生，會先扣除手續費在做金額轉帳，都會從 from 那一方做扣除，如果gas不足就無法交易 )
## 交易的金額部分可以使用工具去做產出，避免手動輸入上面的錯誤發生。
## demo09_1 帳戶對帳戶之間的轉換，就不需要另外取得合約(address)。單純就是兩個帳戶的帳號就可以做轉帳

## 合約事件 EventGenerate.sol
## 建立 migration [truffle create migration EventGenerate]
## 編輯 產生出來的 EventGenerate.js ，編輯內容請看 .\migrations\3_EventGenerate.js
## 重新編譯 truffle 的 migrations [migrate --reset]
## demo13, demo14 事件處理可以使用 notifyEvent (只能用在 websocket的模式下)，或是可以回去參考demo06的方式也是有監聽的效果
## demo14 最後是改成 監聽之後再送出事件也是可以正常動作的

## 錢包教學 
## 下載metamask 到 chrome當中 (他是網頁擴充套件)
## 密碼跟助記辭都要記下 (助記辭比較重要)

## 錢包 測試網絡 
## 1. https://faucet.sepolia.dev/ 註冊、貼上自己 metamask 的位置(在錢包主頁面帳號的下面) 申請 (這個比較慢一點)
## 2. https://goerlifaucet.com/   註冊、貼上自己 metamask 的位置(在錢包主頁面帳號的下面) 申請 (這個30秒左右就會有了)
## 3. https://sepoliafaucet.net/  要使用推特分享才能要到 (這個跟第1個是一樣的不過用推特貼文比較快)
## 上述都可以去要到錢(測試用的)
## https://app.infura.io/ 註冊這個網站之後要連動到錢包要使用到的
## 安裝錢包操作套件 npm install @truffle/hdwallet-provider
## 在metamaks當中找出自己的公私鑰  公鑰在主要帳號下面的地址 私鑰 在帳戶詳情(在帳號右邊的三點區)當中 (可以去看Day3的截圖)
## 建立 demo15.js 準備使用錢包 (請看code)
## 交易紀錄查詢 Etherscan [主要公開網路] (如果是測試網路請查詢的時候後面加上自己使用的幣別 goerli 就查 Etherscan goerli, sepolia 就使用 Etherscan sepolia)
## 查詢的時候貼上自己的帳戶 address 就可以做查詢
## demo16 從交易合約上面反查詢

## lab3_metamask : 使用 [npx create-react-app] lab3_metamask 建立測試專案

=================================================================
## day4 

## 使用 React 架構開發  詳細步驟可以參考 day4.txt
## RCC : React Class Component
## RFC : React Function Component
## 在 index.js 當中如果app 被 [React.StrictMode] 的tag 包住的話，會進入嚴謹模式，程式碼會被做兩次

## 安裝 truffle 之後，打開 truffle-config.js 找到  module.exports 的範圍 增加一行 contracts_build_directory:"./src/contracts", 來指定 contracts的建立路徑
## 安裝 web3 的函式庫

## 建立 contracts [SecretNumber.sol] 在建立兩個 function set/get

## 在src目錄下: 建立出 getMyWeb3.js 編輯內容，主要是需要做各種瀏覽器能支援不同的錢包處理方式去做不同的處理方式

## 啟動 ganache, truffle 然後，打開 development, 再執行 truffle console --network development 與 migrate --reset [如果看到編譯有問題的話記得要去修改 compilers 的版本，再重新執行一次 migrate --reset 就會正常了]
## 完成上述指令之後要去確認 ./src/contracts 之下的 SecretNumber.json 有沒有辦產生出來
## 如果專案會有出現 sourcempa 的相關錯誤或是告警的時候，可以在專案下建立一個 .env的檔案，然後輸入 GENERATE_SOURCEMAP=false 再重新執行專案，就可以略過這一個部份了。

-- 使用 ganachi-gui
## 要匯入帳號的話需要在每個帳號的最右邊的鎖時符號按下去才會出現私鑰 才能貼上做匯入

-- lab4 
## 重新建立一個新的 lab4_web3 的專案 (單純使用html去取得 基本資訊，跟合約無關的步驟)
## ganache-gui 有按下Save的時候會給出一個名稱，用以繼續不然在下次Quick-start的時候就會變成一個全新的服務了，之前的就會不見
-- lab5
## DABB 表準流程 
## 1.npx create-react-app lab5_react 
## 2.cd lab5_react 
## 3.truffle init -y 
## 4.開始建立程式碼
## 建立 xxx.sol，變更truffle-config.js 的 pragma 編譯版本到 0.5.17
## 建立 1_deploy_xxx.js 用來做部屬配置
## 設定 truffle-config.js 找到 module.exports 的 tag 增加一組參數 contracts_build_directory:"./src/sol",
## 設定 truffle-config.js 找到 development: 打開註解然後設定 port 到我們要用的 ganache-gui的port號 [之後要看實際要使用的服務 ip/port 來做設定]
## 專案設定:在 ganachi-gui 右上的螺絲符號按下去把專案加入(找到專案下的 truffle-config.js 檔案) 就可以同步顯示到 ganache-gui 當中了
## 執行 truffle compile 就會看到 設定的編譯路徑當中產生 xxx.json 檔案了
## 執行 truffle deploy 來做部屬  (完成之後應該要能夠在 ganache-gui 看到自己建立的 contract )
## 啟動前端伺服器 npm start
## ※、RCC 可以只變動一個參數
## ※、RFC 每次變動都是要整個[Object]一起異動，不然沒有異動到的部分會顯示不出來

=================================================================
## day5

## 每次專案重新啟動的步驟
1. ganache gui啟動
2. 打開metamask
3. cd lab5_react
4. npm install
5. npm start

## 如果再 ganache-gui 當中沒有看到合約出現可以重新佈署或是確認專案是否有設定同步 [請看Day4的專案設定]，如果設定好沒有的話就在重新佈署一次 [truffle deploy] 


-- drizzle
## 專案的資料管理
## 使用CRA創建lab6  npx create-react-app lab6_react_drizzle
## 安裝使用套件
    npm install @drizzle/store
    npm install @drizzle/react-plugin
    npm install @drizzle/react-components

## 建立 truffle [truffle init]，並設定 truffle-config.js
    1. 找到 compilers 的編譯版本到 0.5.17
    2. 打開 compilers下的 optimizer
    3. 找到 module.exports 增加路徑 contracts_build_directory: "./src/Contracts"
    4. networks->development 打開這個 並把 port號碼改成 9545

## 開始建立使用 react+drizzle 範例 

## 建立 ./contract/Storeage.sol ，增加 set/get/event (比平常多一個event)
## 建立 migrations [truffle create migration Storage], 並變更其名稱 (把前面的數字改成1不用那麼長的數字)
## 設定 truffle-config.js 的編譯路徑還有打開 development tag 再把他的port號碼改成 9545

## 啟動 truffleｍ與配置合約
    1.truffle develop
    2.migrate --reset
## 測試指令 (裡面已經有包含 web3 所以也可以在裡面直接操作查詢餘額的動作)
    1.accounts
    2.accounts[0]
    3.web3.eth.getBalance(accounts[0])
    4.web3.eth.getBalance(accounts[1])
    5.web3.eth.getBalance(accounts[2])

## 開始建立 drizzle 的起始模組 在 ./src/建立一個 drizzleOptions.js
    把要使用的合約(可以放多個)跟web3都放到這個物件當中，作為管理與使用


## 安裝 chorme套件 redux  [https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=zh-TW]
    方便後續觀看開發的流程
## 把drizzle加入到 app.js 當中

## 設定錢包(metamask)連線到 truffle-cli 9545 手動設定進去(去網路列表最下面那邊做手動新增)
## 匯入帳號 可以在 truffle 的啟動那邊找到 Private Keys: 貼一組進去
## 建立 ./src/components/infoContainer.js ，並且在裡面建立 drizzleConnect 的功能模組
## 建立 ./src/components/MyComponent.js ，並且在裡面建立 newContextComponents 的功能模組，可以在這邊把 props 印出來看到 所有區塊鏈要用的參數都在裡面了。減少自己去存取的部分。
## 把 MyComponent 加入到 app.js
## 練習在 MyComponent.js 當中操作區塊鏈的行為與互動


-- drizzle 的事件呼叫
## 安裝 npm install react-toastify
## 在 options 當中增加 events 的部分才能收的到 DataChanged 的事件流程
## 測試在app當中使用 加入了 toasfiy 的部分做測試，把事件在畫面上做通知顯示


-- ERC 20 的教學
## 初始化專案 npm init -y
## 安裝免費版本的合約模組 npm install @openzeppelin/contracts
    truffle init -y
    npm install chai chai-as-promised
    npm install @truffle/hdwallet-provider
## 以上完成環境配置
## 確認 module->@openzeppelin->token 下要有下列四個 ERC20, ERC721, ERC777, ERC1155 的套件模組
## 新開視窗 ctrl+K, ctrl+O，選擇Lab7_ERC20
## 設定專案編譯 solidity 編譯的版本，首先在 contracts 之下建立 PSToken.sol
    輸入 pragma solidity ^0.8.0; (這邊滑鼠右鍵選擇把工作環境的編譯設定成0.8.0) --> solidity:change workspeace compile version
    再去設定.vscode的(找不到檔案的話可以搜尋下列內容的前端關鍵字)、要有先做前一步驟才會看的到這個 settings.json 的檔案
    settings.json
    {
        "solidity.compileUsingRemoteVersion": "v0.8.17+commit.8df45f5f"
    }

## 建立管理員的合約，只有管理員才能發行貨幣，在PSToken.js當中
## 完成之後 truffle compile 看看有沒有錯誤，再去 build\contracts\找看看 PSToken.json、並檢查 "abi" , "bytecode" 是否都有正常出現
## 建立新的 migrations\1_pstoken.js 建立剛剛的內容
## 啟動一個新的 ganache-gui 選一個新的服務(quick-start)，然後再專案設定裡面把剛剛的lab7的 truffle-config.js 加入到 ganache-gui 的專案管控之下
## truffle migrate 部屬到 專案當中，可以用 ganachi-gui 看到有部屬上去了
## 建立出PSToken的 使用變數
    truffle console
    let PSToken = await PSToken.deployed()
    完成之後可以使用下列指令做測試
    PSToken
    PSToken.address
    PSToken.name()
    PSToken.symbol()
    PSToken.totalSupply()
    accounts
    餘額查詢    PSToken.balanceOf(accounts[0])
    代幣發行    PSToken.mint(accounts[0], web3.utils.toWei('5'))
## 因為這邊要重新做一次設定發幣的管理員所以要先回去修改 PSToken.sol 下的 constructor，修改完成之後需要重新啟動 truffle console
    quit console 
    重新進入    truffle console
    重新佈署    deploy --reset

## 再重新操作一次
let token1 = await PSToken.deployed()
token1.minter()
accounts[0]
token1.mint(accounts[0], web3.utils.toWei('5'))
token1.balanceOf(accounts[0])

## 以上就是完成發幣的流程


